<!DOCTYPE html>
<html lang="en">
<head>
   <base target="_top">
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, target-densityDpi=device-dpi, minimum-scale=1.0, maximum-scale = 1.0, user-scalable = no">
   <title>NYCSpot</title>
   <link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />
   <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css" integrity="sha256-sA+zWATbFveLLNqWO2gtiw3HL/lh1giY/Inf1BJ0z14=" crossorigin=""/>
   <script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js" integrity="sha256-o9N1jGDZrf5tS+Ft4gbIK7mYMipq9lqpVJ91xHSyKhg=" crossorigin=""></script>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
 
   <style>
      html, body {
         height: 100%;
         margin: 0;
      }
      .leaflet-container {
         height: 400px;
         width: 600px;
         max-width: 100%;
	 max-height: 100%;
      }
      #map {
         height: 100%;
	 width: 100vw;
	 margin-top: 18px;
      }
	   .pop{
	      color: green;
	      font-size: 14px;
    	      font-weight: bold;
	      font-family: calibri;
	   }
	   .titl{
	      font-size: 14px;
    	      font-weight: bold;
	      font-family: calibri;
	   }
	   .leaflet-interactive{
	      stroke-width: 8px !important;
	   }
   </style>
</head>
<body onload="getsec()">

<div id='map'></div>
<script src="sample-geojson.js" type="text/javascript"></script>
<script>

	var map= "";
	var marker;
	var markers;  
	var searching = L.icon({ iconUrl: 'icon.png', iconSize:[15,15] });
    	var greenIcon = L.icon({ iconUrl: 'icon_available.png', iconSize:[15,15] });
    	var redIcon   = L.icon({ iconUrl: 'icon_unavailable.png', iconSize:[16,16] });
	
	//const socket = io();
	
	var fun3 = function(la, lo){
		
	    const StartDate = new Date(new Date().toLocaleString("en-US", {timeZone: "America/New_York"})).toISOString().split('T')[0];
	    const EndDate = StartDate; 
	    const hour = new Date(new Date().toLocaleString("en-US", {timeZone: "America/New_York"})).getHours()
	    const minutes = new Date(new Date().toLocaleString("en-US", {timeZone: "America/New_York"})).getMinutes()
	    const StartTime = hour + ':'+ minutes
	    const hour2 = hour + 1
	    const EndTime = hour2 + ':'+ minutes
	    request("https://www.opencurb.nyc/search.php?address=&coord="+la+","+lo+"&v_type=COMMERCIAL&duration=60&a_type=PARK&meter=2&radius=300&stand_type=LOADING+%26+UNLOADING&stop_type=LOADING+%26+UNLOADING&StartDate=" + StartDate + "&StartTime=" + StartTime + "&EndDate=" + EndDate + "&EndTime=" + EndTime + "&action_allowed=2&zoomLevel=17&auth_geo_loc=0&device_type=desktop");
	    //request("https://www.opencurb.nyc/search.php?coord=40.7344544,-73.8722772&v_type=PASSENGER&a_type=PARK&meter=2&radius=300&StartDate=2022-10-30&StartTime=06:25&EndDate=2022-10-30&EndTime=07:25&action_allowed=1");	

	    $.ajax({
	      url: 'https://camarasdefotodeteccion.com/getsector',
	      method : 'POST',
	      data: { "user_lat":la, "user_lon":lo },
	      success : function(data){ 
		sector = data;
		if(sector == "ko"){
		   console.log("no hay parkings cerca")
		} else {
		   featurelat = localStorage.getItem("feature-lat");
	           featurelng = localStorage.getItem("feature-lng");	
			
		     for(var prop in sector){
			if (sector.hasOwnProperty(prop)) {
			    state = data[prop].name;
			    lat = data[prop].latitude;
			    lng = data[prop].longitude;
			    if( lat == featurelat && lng == featurelng && state == "occupied"){
			       ic = searching
			       markerLocation = new L.LatLng(featurelat, featurelng);
		   	       markers = new L.Marker(markerLocation, {icon: ic});
		   	       map.addLayer(markers);
		   	       popupContent = "<p> <span class= 'titl'> Your ocuppied parking lot </p>"
		   	       popupContent += "<form action=''><input type='button' onclick='unoccupy()' style='background: #33ff00; padding: 12px; border: none; width: 100%; font-size: 18px; font-weight: bold;' value='Unoccupy parking lot' > </form></br>";		 
		   	       popupContent += "<span class= 'titl'> When you click in unoccupy parking button help near people who is searching parkings! </span></br>";		 
		               markers.bindPopup(popupContent).openPopup();
			    } else {			
        	               /*if(state == "unoccupied"){	
		      	         ic = greenIcon
		   	       }
		   	       if(state == "occupied"){ 
		      	          ic = redIcon
		   	       }*/
				    ic = greenIcon;
			       markerLocation = new L.LatLng(lat, lng);
		   	       markers = new L.Marker(markerLocation, {icon: ic});
		   	       map.addLayer(markers);
			    }	    
			}
		    }
			
		}
		// x.innerHTML= data;
	      }, error: function(err){console.log('Failed');} 
	    });
	 }
	
	const options = {}
	navigator.geolocation.watchPosition(({coords}) => {
	       user_lat =  40.7344544 //coords.latitude    
	       user_lon =  -73.8722772 //coords.longitude
	       map = L.map('map').setView([user_lat,user_lon], 18);
       	       tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
       		  maxZoom: 30, attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
       	       }).addTo(map); 
               if (marker) { // check
		  map.removeLayer(marker); // remove
	       }
               marker = L.marker([user_lat,user_lon]).addTo(map);
	       marker.bindPopup('<p style="font-weight: bold; font-size:15px">You are here</p>').openPopup();
	       fun3(user_lat,user_lon)	
	}, console.error, options);	
	
	var y = document.getElementById("activ");
	const audio = new Audio("notification.mp3");
	function addClick() {  // activa: document.querySelector('#btn1').click()
	    audio.play();
	    y.innerHTML = "<table style='margin-bottom: -20px; margin-left: 9px; padding-top: 20px;'><tr><td><image src='icon_available.png' style='width: 17px'></td><td style='padding-bottom: 4px;'>Available Parking Alert Activated<td></tr></table> ";
	}
	
	//const map = L.map('map').setView([40.763024643204, -73.985624265132], 18);
	/*function getLocation() {
	  if (navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(showPosition);
	  } else {
	    x.innerHTML = "Geolocation is not supported by this browser.";
	  }
	}
	function showPosition(position) {
	  map = L.map('map').setView([position.coords.latitude,position.coords.longitude], 18);	
        } */
	/*const map = L.map('map').setView([40.7354313,-73.872582], 18);
	marker = L.marker([40.7354313,-73.872582]).addTo(map);
	marker.bindPopup('<p style="font-weight: bold; font-size:15px">You are here</p>').openPopup();
	const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
		attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
	}).addTo(map); */
	
	function onEachFeature(feature, layer) {  
		//bind click
		const NYdate = new Date(new Date().toLocaleString("en-US", {timeZone: "America/New_York"}));
		var now = new Date().toISOString().slice(0, 16);
		layer.on('click', function (e) {   console.log(feature.properties.until_dt_min)
	           // You can make your ajax call declaration here
	           //$.ajax(...
		   localStorage.setItem('feature-lat', e.latlng.lat);  // en el click del botón de ocupación del popup get localstorage para enviar a todos
		   localStorage.setItem('feature-lng', e.latlng.lng);  // en el onclick poner el marker rojo de ocupado
		                                                       // al feature-estado de localstorage agregarle estado ocuppied
			                                               // enviar con fun al api de cálculo
						// Botón desocupar parqueadero : cuando se desocupe getlocalstorage del punto y cambiar el estado y enviar a todos la actualización
	       	});
		if( feature.properties.rule_simplified.includes("Free Parking Permitted")) 	     { typetitle = 'Free Parking Permitted';           colorStyle = '#43df40db' } 
		if( feature.properties.rule_simplified == 'No Parking Anytime') 	   	     { typetitle = 'No Parking Anytime';               colorStyle = '#dd1313d4' }
		if( feature.properties.rule_simplified.includes('No Parking From')) 	   	     { typetitle = 'No Parking';                       colorStyle = '#e7171794' }
		if( feature.properties.rule_simplified.includes('2.0 Hr Metered Parking Permitted')) { typetitle = '2.0 Hr Metered Parking Permitted'; colorStyle = '#2e17e9b0' }
		if( feature.properties.rule_simplified.includes('1.0 Hr Metered Parking Permitted')) { typetitle = '1.0 Hr Metered Parking Permitted'; colorStyle = '#2e17e961' }
		if( feature.properties.rule_simplified.includes('3.0 Hr Metered Parking Permitted')) { typetitle = '3.0 Hr Metered Parking Permitted'; colorStyle = '#2e17e9'   }
		let popupContent = `${NYdate} <br><h2 style='color: ${colorStyle}; font-weight: bold; padding-left: 17px'> ${typetitle} </h2>`
		popupContent +=` <span class= 'titl'>Rule simplified:          </span><span class= 'pop'> ${feature.properties.rule_simplified} </span></br>`;
		popupContent +=` <span class= 'titl'>Info parking rule :       </span><span class= 'pop'> ${feature.properties.addtl_info_parking_rule} </span> </br>`;
		popupContent +=` <span class= 'titl'>Cross streets:            </span><span class= 'pop'> ${feature.properties.cross_streets} </span></br>`;
		popupContent +=` <span class= 'titl'>Main street:              </span><span class= 'pop'> ${feature.properties.main_street} </span></br>`;
		popupContent +=` <span class= 'titl'>Parking allowed:          </span><span class= 'pop'> ${feature.properties.parking_allowed} </span></br>`;
		popupContent +=` <span class= 'titl'>Side of street:           </span><span class= 'pop'> ${feature.properties.side_of_st} </span></br>`;
		// se requiere identificar también el feature que se está ocupando con su momento de ocupación
		if(localStorage.getItem('feature-occupy-moment') === null && feature.properties.rule_simplified != 'No Parking Anytime') {
		   popupContent +=` <span class= 'titl'> <button type='button' onclick='ocuppy()' class='leaflet-popup-close-button' style='background: #f4f716; padding: 12px; border: none; width: 100%; font-size: 18px; font-weight: bold;' > Ocuppy this parking lot </button></span></br>`;
		}				
		if (feature.properties && feature.properties.popupContent) {
			popupContent +=popupContent += feature.properties.popupContent;	
		}
		layer.bindPopup(popupContent); 
	}
	
     //request("https://www.opencurb.nyc/search.php?address=&coord=40.75485718111395,-73.98367046187724&dest_coord=&bbox_coord=40.75341865171918,-73.98916362593974,40.75629567938344,-73.97817729781474&v_type=COMMERCIAL&duration=60&a_type=PARK&meter=2&stand_type=LOADING+%26+UNLOADING&stop_type=LOADING+%26+UNLOADING&StartDate=2022-11-15&StartTime=00%3A09&EndDate=2022-11-15&EndTime=01%3A09&action_allowed=2&zoomLevel=17&auth_geo_loc=0&device_type=desktop");
     //request("https://www.opencurb.nyc/search.php?address=&coord=40.7344544,-73.8722772&dest_coord=&bbox_coord=40.7328044,-73.8822772,40.7380044,-73.8510772&v_type=COMMERCIAL&duration=60&a_type=PARK&meter=2&radius=300&stand_type=LOADING+%26+UNLOADING&stop_type=LOADING+%26+UNLOADING&StartDate=" + StartDate + "&StartTime=" + StartTime + "&EndDate=" + EndDate + "&EndTime=" + EndTime + "&action_allowed=2&zoomLevel=17&auth_geo_loc=0&device_type=desktop");
     //request("https://www.opencurb.nyc/search.php?coord=40.7344544,-73.8722772&v_type=PASSENGER&a_type=PARK&meter=2&radius=300&StartDate=2022-10-30&StartTime=06:25&EndDate=2022-10-30&EndTime=07:25&action_allowed=1");	

     function request(url) {
       return new Promise( function(resolve,reject){
      	 $.getJSON(url, function resolve(data) {
            if(data['features'].length===0) {
               $('#nav_msg').text('No Results Found');
               return;
            } else {
               // map.data.addGeoJson(data);
               // $('#nav_msg').text('');
	       const freeBusLayer = L.geoJSON(data, {
		  filter(feature, layer) {
		     if (feature.properties) {
			 // If the property "underConstruction" exists and is true, return false (don't render features under construction)
			 return feature.properties.underConstruction !== undefined ? !feature.properties.underConstruction : true;
		     }
		     return false;
	          }, onEachFeature , style: style
	       }).addTo(map);	  
            } 	   
         });
       });     
     }
	
     function style(feature) {
	   if (feature.properties.rule_simplified == 'No Parking Anytime') { // No parking
	     return {
	       weight: 2,
	       opacity: 1,
	       color: '#dd1313d4',
	       dashArray: '3',
	       fillOpacity: 0.3,
	       fillColor: '#ff0000'   
	     };
	   } else if( feature.properties.rule_simplified.includes('No Parking From')) { // No parking partial
	     return {
	       weight: 2,
	       opacity: 1,
	       color: '#e7171794',
	       dashArray: '3',
	       fillOpacity: 0.3,
	       fillColor: '#666666'
	       };	      
	   }  else if(feature.properties.rule_simplified.includes("Free Parking Permitted")) { // free parking
		 return {
	     	  weight: 2,
	     	  opacity: 1,
	     	  color: '#43df40db',
	     	  dashArray: '3',
	     	  fillOpacity: 0.3,
	     	  fillColor: '#666666'
	     	};    
           } else if(feature.properties.rule_simplified.includes('2.0 Hr Metered Parking Permitted')) { // 2.0 Hr Metered Parking Permitted
		 return {
	     	  weight: 2,
	     	  opacity: 1,
	     	  color: '#2e17e9b0',
	     	  dashArray: '3',
	     	  fillOpacity: 0.3,
	     	  fillColor: '#666666' 
	     	};
	   } else if(feature.properties.rule_simplified.includes('1.0 Hr Metered Parking Permitted')) { // 1.0 Hr Metered Parking Permitted
		 return {
	     	  weight: 2,
	     	  opacity: 1,
	     	  color: '#2e17e961', 
	     	  dashArray: '3',
	     	  fillOpacity: 0.3,
	     	  fillColor: '#666666' 
	     	};
	   } else if(feature.properties.rule_simplified.includes('3.0 Hr Metered Parking Permitted')) { // 3.0 Hr Metered Parking Permitted
		 return {
	     	  weight: 2,
	     	  opacity: 1,
	     	  color: '#2e17e9', 
	     	  dashArray: '3',
	     	  fillOpacity: 0.3,
	     	  fillColor: '#666666' 
	     	};
	   } else {
	       return {
	       weight: 2,
	       opacity: 1,
	       color: 'black',
	       dashArray: '3',
	       fillOpacity: 0.3,
	       fillColor: '#666666'
	     };
	   }
      }	   
  	
	var fun = function(la, lo, state){
	    $.ajax({
	      url: 'https://camarasdefotodeteccion.com/insertparking',
	      method : 'POST',
	      data: {"user_lat":la, "user_lon":lo, "state": state},
	      success : function(data){ 
		ciudad = data;
		if(ciudad == "ko"){
		   console.log("no hay parkings cerca")
		} else {
		   console.log(ciudad)
		}
	      }, error: function(err){console.log('Failed');} 
	    });
	 }
	
	var ocuppy = function(){
	   var now = new Date().toISOString().slice(0, 16);
	   featurelat = localStorage.getItem("feature-lat");
	   featurelng = localStorage.getItem("feature-lng");
	   localStorage.setItem('feature-occupy-moment', now);
	   state = "occupied"
	   fun(featurelat,featurelng,state)
	   //window.location.reload();
	}
	
	/*function onMapClick(e) {
	   const closeButton = e.popup._closeButton;
	   closeButton.addEventListener("click", () => {
	      console.log("Close popup in click over any point on map");
	   });
	   map.off("popupclose");
	}
	map.on("popupclose", onMapClick);*/
	
       function unoccupy(){ 
	     state = "unoccupied"
	     featurelat = localStorage.getItem("feature-lat");
	     featurelng = localStorage.getItem("feature-lng");	
	     featureoccupymoment = localStorage.getItem('feature-occupy-moment');
	     fun2(featurelat,featurelng,state)
	     localStorage.removeItem("feature-lat")
	     localStorage.removeItem("feature-lng")
	     localStorage.removeItem("feature-occupy-moment")
	     window.location.reload();
	}
	
	var fun2 = function(la, lo, state){
	    //socket.emit( 'load_init_emit', {"user_lat":la, "user_lon":lo, "state": state} ); 	
	    $.ajax({
	      url: 'https://camarasdefotodeteccion.com/updateparking',
	      method : 'POST',
	      data: {"user_lat":la, "user_lon":lo, "state": state},
	      success : function(data){    
		ciudad = data;
		if(ciudad == "ko"){
		   console.log("no parkings")
		} else {
		   console.log(ciudad)
		}
	      }, error: function(err){console.log('Failed');} 
	    });
	 }
	
	var getsec = function(){ 
	    $.ajax({
	      url: 'https://camarasdefotodeteccion.com/getsector',
	      method : 'POST',
	      data: {"user_lat":40.7344544, "user_lon":-73.8722772, "state": "occupied"},
	      success : function(data){ 
		 console.log(data)
	      }, error: function(err){console.log('Failed');} 
	    });
	}
	
</script>
	
</body>
</html>
